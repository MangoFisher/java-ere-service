# Java ERE 项目分析配置文件
# 复制此文件并修改为你的项目配置

# 项目基本信息
project:
  name: "Spring Boot Admin Client by mango"
  root: "/Users/zhangxiaoguo/Downloads/spring-boot-admin-3.5.5/spring-boot-admin-client"
  packages:
    - "de.codecentric.boot.admin"  # 项目包名（包含 client 及其所有子包）

# 源码路径（用于符号解析）
sources:
  - "src/main/java"

# 分析配置
analysis:
  # 包含规则，如果文件匹配任何 include 规则 → 保留，如果没有 include 规则 → 全部保留，如果有 include 规则但不匹配 → 跳过
  includes:
    - "src/main/java/**/*.java"
  
  # 排除规则（优先级高于 includes），如果文件匹配任何 exclude 规则 → 直接跳过
  excludes:
    - "**/test/**"
    - "**/*Test.java"

# 符号解析器配置
symbolResolver:
  # 是否包含 JDK 类
  includeJdk: true
  
  # 第三方库依赖配置
  dependencies:
    # 模式: 
    #  none: 不加载第三方库（最快，但可能无法解析部分调用）
    #  essential: 只加载核心库（推荐，平衡性能和准确性）
    #  all: 加载所有依赖（最慢，但最准确）
    mode: "essential"
    
    # essential 模式下加载的核心库
    essentialPatterns:
      - "spring-context"
      - "spring-beans"
      - "spring-core"
      - "lombok"
      - "mybatis"
      - "slf4j-api"
    
    # 本地依赖目录
    localDir: "target/dependency"

# 实体提取配置
extraction:
  # 第三方库调用处理策略: 
  #  ignore: 完全忽略第三方库调用
  #  mark: 标记为外部依赖（推荐，保留信息但不创建实体）
  #  full: 完整记录（不推荐，会导致图谱爆炸）
  thirdPartyCallStrategy: "mark"
  
  # 是否提取注解信息（全局开关，影响 has_annotation 关系）
  includeAnnotations: true
  
  # 是否提取 Javadoc
  includeJavadoc: true
  
  # ==================== 预设分析场景 ====================
  # 场景说明:
  #   call_chain: 调用链分析（实体2个 + 关系1个）
  #               - 实体: ClassOrInterface, Method
  #               - 关系: calls
  #               - 性能: 最快（~5秒）
  #               
  #   impact_analysis: 影响范围分析（实体5个 + 关系3个）- 推荐
  #               - 实体: ClassOrInterface, Method, Parameter, Return, Field
  #               - 关系: calls, has_parameter, returns
  #               - 性能: 中等（~15秒）
  #               
  #   full: 完整分析（实体6个 + 关系8个）
  #               - 实体: ClassOrInterface, Method, Parameter, Return, Field, Exception
  #               - 关系: calls, overrides, has_parameter, returns, accesses, throws, has_annotation, implements
  #               - 性能: 慢（几分钟，取决于项目规模和未实现功能）
  #               
  #   custom: 自定义场景 - 使用下面的 entities 和 relations 自定义配置
  #
  scenario: "full"
  
  # ==================== 6种实体类型配置 ====================
  # 说明: 只在 scenario="custom" 时生效，预设场景会覆盖此配置
  entities:
    ClassOrInterface: true    # ✅ 已实现 | 类/接口（提供方法归属）
    Method: true              # ✅ 已实现 | 方法（核心实体）
    Field: true               # ✅ 已实现 | 字段（数据依赖分析）
    Parameter: true           # ✅ 已实现 | 参数（API签名分析）
    Return: true              # ✅ 已实现 | 返回值（类型兼容性）
    Exception: false          # ❌ 未实现 | 异常（异常传播分析）
  
  # ==================== 8种关系类型配置 ====================
  # 说明: 只在 scenario="custom" 时生效，预设场景会覆盖此配置
  relations:
    calls: true               # ✅ 已实现 | 方法调用（核心关系）
    overrides: false          # ❌ 未实现 | 方法重写（⚠️ 耗时极高）
    has_parameter: true       # ✅ 已实现 | 参数关系
    returns: true             # ✅ 已实现 | 返回值关系
    accesses: false           # ❌ 未实现 | 字段访问
    throws: false             # ❌ 未实现 | 抛出异常
    has_annotation: false     # ❌ 未实现 | 注解使用
    implements: false         # ❌ 未实现 | 类实现
  
  # ==================== 高级选项 ====================
  # 符号解析失败时的处理策略
  #   ignore: 静默忽略，不输出任何信息
  #   warn: 输出警告信息（推荐）
  #   error: 抛出错误并停止分析
  onResolutionFailure: "warn"
  
  # 是否启用性能统计（输出各阶段耗时）
  enablePerformanceStats: true
  
  # 是否自动补全依赖的实体
  # 例如: 如果 has_parameter 关系开启，自动开启 Parameter 实体
  autoCompleteEntities: true
