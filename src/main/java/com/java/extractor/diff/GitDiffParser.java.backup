package com.java.extractor.diff;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Git Diff解析器
 * 解析git diff格式的文本文件
 */
public class GitDiffParser {

    /**
     * 解析git diff文件
     *
     * @param diffFilePath diff文件路径
     * @return Diff块列表
     */
    public List<DiffHunk> parse(String diffFilePath) throws IOException {
        List<DiffHunk> hunks = new ArrayList<>();

        try (
            BufferedReader reader = new BufferedReader(
                new FileReader(diffFilePath)
            )
        ) {
            String line;
            DiffHunk currentHunk = null;
            String currentFilePath = null;
            String oldFilePath = null; // 用于跟踪旧文件路径（--- 行）
            boolean isFileDeleted = false; // 标记文件是否被删除

            // 追踪当前行号
            int currentOldLineNumber = 0;
            int currentNewLineNumber = 0;

            while ((line = reader.readLine()) != null) {
</text>

<old_text line=95>
                            hunks.add(currentHunk);
                            // 创建新hunk但保持相同的文件
                            currentHunk = new DiffHunk(currentFilePath);
                        }
                        // 解析行号信息
                        parseHunkHeader(line, currentHunk);
                    } else if (
                        currentFilePath != null &&
                        currentFilePath.endsWith(".java")
                    ) {
                        // 如果还没有创建hunk，现在创建
                        currentHunk = new DiffHunk(currentFilePath);
                        parseHunkHeader(line, currentHunk);
                // diff --git a/path/to/file b/path/to/file
                if (line.startsWith("diff --git")) {
                    // 开始新文件的diff
                    if (
                        currentHunk != null &&
                        (!currentHunk.getAddedLines().isEmpty() ||
                            !currentHunk.getRemovedLines().isEmpty() ||
                            !currentHunk.getContextLines().isEmpty())
                    ) {
                        hunks.add(currentHunk);
                    }
                    currentHunk = null;
                    oldFilePath = null;
                    isFileDeleted = false;
                }
                // --- a/path/to/file
                else if (line.startsWith("---")) {
                    // 提取旧文件路径
                    oldFilePath = extractOldFilePath(line);
                }
                // +++ b/path/to/file
                else if (line.startsWith("+++")) {
                    // 检查是否是文件删除（+++ /dev/null）
                    if (line.contains("/dev/null")) {
                        isFileDeleted = true;
                        // 使用旧文件路径
                        if (
                            oldFilePath != null && oldFilePath.endsWith(".java")
                        ) {
                            currentFilePath = oldFilePath;
                            currentHunk = new DiffHunk(currentFilePath);
                            currentHunk.setFileDeleted(true);
                        }
                    } else {
                        // 正常情况：提取新文件路径
                        currentFilePath = extractFilePath(line);
                        isFileDeleted = false;

                        // 只处理Java文件
                        if (
                            currentFilePath != null &&
                            currentFilePath.endsWith(".java")
                        ) {
                            currentHunk = new DiffHunk(currentFilePath);
                            currentHunk.setFileDeleted(false);
                        }
                    }
                }
                // @@ -old_line,old_count +new_line,new_count @@ optional context
                else if (line.startsWith("@@")) {
                    // 新的变更块（hunk header）
                    if (currentHunk != null) {
                        // 如果当前hunk已有内容，保存它
                        if (
                            !currentHunk.getAddedLines().isEmpty() ||
                            !currentHunk.getRemovedLines().isEmpty() ||
                            !currentHunk.getContextLines().isEmpty()
                        ) {
                            hunks.add(currentHunk);
                            // 创建新hunk但保持相同的文件
                            currentHunk = new DiffHunk(currentFilePath);
                        }
                        // 解析行号信息
                        parseHunkHeader(line, currentHunk);
                    } else if (
                        currentFilePath != null &&
                        currentFilePath.endsWith(".java")
                    ) {
                        // 如果还没有创建hunk，现在创建
                        currentHunk = new DiffHunk(currentFilePath);
                        parseHunkHeader(line, currentHunk);
                    }
                }
                // + added line
                else if (line.startsWith("+") && !line.startsWith("+++")) {
                    if (currentHunk != null) {
                        // 移除开头的+号
                        String content = line.substring(1);
                        currentHunk.addAddedLine(content);
                        // 添加带行号的新增行
                        currentHunk.addAddedLineWithNumber(
                            content,
                            currentNewLineNumber
                        );
                        currentNewLineNumber++;
                    }
                }
                // - removed line
                else if (line.startsWith("-") && !line.startsWith("---")) {
                    if (currentHunk != null) {
                        // 移除开头的-号
                        String content = line.substring(1);
                        currentHunk.addRemovedLine(content);
                        // 添加带行号的删除行
                        currentHunk.addRemovedLineWithNumber(
                            content,
                            currentOldLineNumber
                        );
                        currentOldLineNumber++;
                    }
                }
                // context line (starts with space)
                else if (line.startsWith(" ") && currentHunk != null) {
                    // 上下文行，移除开头的空格
                    String content = line.substring(1);
                    currentHunk.addContextLine(content);
                    // 上下文行在新旧文件中都存在，两个行号都要增加
                    currentOldLineNumber++;
                    currentNewLineNumber++;
                }
            }

            // 添加最后一个hunk
            if (
                currentHunk != null &&
                (!currentHunk.getAddedLines().isEmpty() ||
                    !currentHunk.getRemovedLines().isEmpty() ||
                    !currentHunk.getContextLines().isEmpty())
            ) {
                hunks.add(currentHunk);
            }
        }

        return hunks;
    }

    /**
     * 从diff行中提取旧文件路径
     * 例如: "--- a/src/main/java/Example.java" -> "src/main/java/Example.java"
     */
    private String extractOldFilePath(String line) {
        // --- a/path 或 --- /dev/null
        if (line.contains("/dev/null")) {
            return null; // 文件是新增的
        }

        // 提取 a/ 之后的路径
        int aIndex = line.indexOf("a/");
        if (aIndex >= 0) {
            return line.substring(aIndex + 2).trim();
        }

        // 降级：去掉--- 和空格
        return line.replaceFirst("^---\\s+", "").trim();
    }

    /**
     * 从diff行中提取新文件路径
     * 例如: "+++ b/src/main/java/Example.java" -> "src/main/java/Example.java"
     */
    private String extractFilePath(String line) {
        // +++ b/path 或 +++ /dev/null
        if (line.contains("/dev/null")) {
            return null; // 文件被删除
        }

        // 提取 b/ 之后的路径
        int bIndex = line.indexOf("b/");
        if (bIndex >= 0) {
            return line.substring(bIndex + 2).trim();
        }

        // 降级：去掉+++ 和空格
        return line.replaceFirst("^\\+\\+\\+\\s+", "").trim();
    }

    /**
     * 解析hunk header获取行号信息
     * 例如: "@@ -335,6 +347,9 @@ public abstract class BaseConfigureWrapper {"
     * 格式: @@ -start_line,line_count +start_line,line_count @@ context
     *
     * @return int[] {oldStartLine, newStartLine}
     */
    private int[] parseHunkHeader(String line, DiffHunk hunk) {
        // 正则匹配: @@ -335,6 +347,9 @@
        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(
            "@@ -(\\d+)(?:,(\\d+))? \\+(\\d+)(?:,(\\d+))? @@(.*)"
        );
        java.util.regex.Matcher matcher = pattern.matcher(line);

        if (matcher.find()) {
            int oldStart = Integer.parseInt(matcher.group(1));
            int newStart = Integer.parseInt(matcher.group(3));
            String context = matcher.group(5);

            hunk.setStartLine(newStart);

            // 如果有上下文信息（通常是方法或类名），保存它
            if (context != null && !context.trim().isEmpty()) {
                hunk.setHunkContext(context.trim());
            }

            return new int[] { oldStart, newStart };
        }

        return new int[] { 0, 0 };
    }
}
